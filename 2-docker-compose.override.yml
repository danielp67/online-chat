version: '3'

services:

  traefik:
    restart: unless-stopped
    image: traefik:latest
    container_name: traefik
    hostname: traefik
    ports: # partage des ports 80 et 443 sur la machine hôte
      - "80:80"
      - "443:443"
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./tls.yml:/etc/traefik/tls.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - certs:/etc/ssl/traefik
    labels:
      - "traefik.enable=true" # active la gestion de ce container par Traefik
      #- "traefik.http.middlewares.httpsonly.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.httpsonly.redirectscheme.permanent=true"
      #- "traefik.http.routers.httpsonly.rule=HostRegexp(`{any:.*}`)"
      #- "traefik.http.routers.httpsonly.middlewares=httpsonly"
      # - "traefik.http.routers.dashboard.rule=Host(`traefik.example.com`)"
      #- "traefik.http.routers.dashboard.service=dashboard@internal"
      #- "traefik.http.routers.api.rule=Host(`traefik.example.com`) && PathPrefix(`/api`)"
      #- "traefik.http.routers.api.service=api@internal"
      # - "traefik.http.routers.dashboard.tls=true"
      # - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      #- "traefik.http.routers.api.tls=true"
      #- "traefik.http.routers.api.tls.certresolver=myresolver"

      - "traefik.http.routers.api.rule=Host(`docker.localhost`)" # indique à Traefik que le Host de la requête doit être 'localhost'
      - "traefik.http.routers.api.service=api@internal" # associe la route au service interne de Traefik api@internal

    networks:
      - devNet

  php8:
    container_name: php8
    #image: php:latest
    build: ./docker/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`web.docker.localhost`)"
    volumes:
      - ./:/var/www/html/
    environment:
      PHP_OPCACHE_VALIDATE_TIMESTAMPS: "1"
      PHP_OPCACHE_MAX_ACCELERATED_FILES: "10000"
      PHP_OPCACHE_MEMORY_CONSUMPTION: "192"
      PHP_OPCACHE_MAX_WASTED_PERCENTAGE: "10"

    networks:
      - devNet

  mysql:
    container_name: mysql
    image: mysql:latest
    restart: always
    labels:
      - "traefik.enable=true" # active la gestion de ce container par Traefik
    volumes:
      - ./db/:/var/lib/mysql/
      # - ./database/:/docker-entrypoint-initdb.d
    ports:
      - 3306:3306
    environment:
      # MYSQL_DATABASE: championnat_ski
      # MYSQL_USER: root
      # MYSQL_PASSWORD:
      MYSQL_ROOT_PASSWORD: test
    networks:
      - devNet

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:latest
    restart: always
    depends_on:
      - mysql
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.phpmyadmin.rule=Host(`pma.docker.localhost`)"
    volumes:
      - /sessions
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_PASSWORD=test
      - PMA_USER=root
    networks:
      - devNet

  composer:
    container_name: composer
    image: composer:latest
    restart: always
    command: install
    working_dir: /var/www/html/
    volumes:
      - ./:/var/www/html/
    networks:
      - devNet

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:v1.0.1
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mho.docker.localhost`)"
      - "traefik.http.routers.mailhog.entrypoints=web"
      - "traefik.services.mailhog.loadbalancer.server.port=8025"
    networks:
      - devNet


  app1:
    image: containous/whoami
    labels:
      - "traefik.http.routers.app1.rule=Host(`app1.traefik.me`)"
      - "traefik.http.routers.app1-tls.tls.domains[0].main=app1.traefik.me"
      - "traefik.http.routers.app1-tls.tls.domains[0].sans=app1-*.traefik.me"
    networks:
      - devNet

  reverse-proxy-https-helper:
    image: alpine
    command: sh -c "cd /etc/ssl/traefik
      && wget traefik.me/cert.pem -O cert.pem
      && wget traefik.me/privkey.pem -O privkey.pem"
    volumes:
      - certs:/etc/ssl/traefik
    networks:
      - devNet

  ###> symfony/mercure-bundle ###
  mercure:
    image: dunglas/mercure
    restart: unless-stopped
    environment:
      SERVER_NAME: ':80'
      MERCURE_PUBLISHER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      MERCURE_SUBSCRIBER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
      # Set the URL of your Symfony project (without trailing slash!) as value of the cors_origins directive
      MERCURE_EXTRA_DIRECTIVES: |
        cors_origins http://127.0.0.1:8000
    # Comment the following line to disable the development mode
    command: /usr/bin/caddy run --config /etc/caddy/Caddyfile.dev
    volumes:
      - mercure_data:/data
      - mercure_config:/config
###< symfony/mercure-bundle ###

volumes:
  certs:

  ###> symfony/mercure-bundle ###
  mercure_data:
  mercure_config:
###< symfony/mercure-bundle ###


networks:
  devNet:
    name: devNet


